using System.Globalization;
using System.Net;
using System.Text.RegularExpressions;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using TaskManager;

public interface IReportHandler
{
    Task ProcessAsync(ITelegramBotClient bot, Message message, Account? account, CancellationToken ct);
}

public class ReportHandler : IReportHandler
{
    public async Task ProcessAsync(ITelegramBotClient bot, Message message, Account? account, CancellationToken ct)
    {
        if (account == null)
        {
            await bot.SendTextMessageAsync(message.Chat.Id, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", cancellationToken: ct);
            return;
        }

        var userId = message.From!.Id;
        var lastReport = DatabaseHelper.GetLastReportByUser(userId.ToString());
        if (lastReport != null)
        {
            var timeSinceLastReport = DateTime.Now - lastReport.ReceivedAt;
            if (timeSinceLastReport.TotalHours < 23)
            {
                var timeLeft = 23 - timeSinceLastReport.TotalHours;
                await bot.SendTextMessageAsync(message.Chat.Id, $"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {timeLeft:F0} —á–∞—Å–æ–≤.", cancellationToken: ct);
                return;
            }
        }

        string reportText = message.Text!.Trim();
        var requiredLines = new (string Required, string ErrorExplanation)[]
        {
            ("–ò–º—è:",        "–í –≤–∞—à–µ–º –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"–ò–º—è:\""),
            ("–î–∞—Ç–∞:",       "–í –≤–∞—à–µ–º –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"–î–∞—Ç–∞:\""),
            ("–ß–∞—Å–æ–≤:",      "–í –≤–∞—à–µ–º –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"–ß–∞—Å–æ–≤:\""),
            ("–°–¥–µ–ª–∞–Ω–æ:",    "–í –≤–∞—à–µ–º –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"–°–¥–µ–ª–∞–Ω–æ:\""),
            ("–ü—Ä–æ–±–ª–µ–º—ã:",   "–í –≤–∞—à–µ–º –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"–ü—Ä–æ–±–ª–µ–º—ã:\". –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º, –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–µ—Ç\""),
            ("–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:","–í –≤–∞—à–µ–º –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:\". –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–µ—Ç\"")
        };

        foreach (var (required, explanation) in requiredLines)
        {
            if (!Regex.IsMatch(reportText, @$"(?im)^{Regex.Escape(required)}\s*.*$"))
            {
                string errorMsg =
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞.\n\n" +
                    "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n" +
                    "üìã <b>–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:</b>\n\n" +
                    "–ò–º—è: [–í–∞—à–µ –∏–º—è]\n" +
                    "–î–∞—Ç–∞: [–î–î.–ú–ú.–ì–ì–ì–ì]\n" +
                    "–ß–∞—Å–æ–≤: [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤]\n" +
                    "–°–¥–µ–ª–∞–Ω–æ:\n- [–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã]\n" +
                    "–ü—Ä–æ–±–ª–µ–º—ã:\n- [–ï—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ]\n" +
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:\n- [–ü–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞/–¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–±–æ—Ç—É]\n\n" +
                    explanation;

                await bot.SendTextMessageAsync(message.Chat.Id, errorMsg, cancellationToken: ct);
                return;
            }
        }

        var dateMatch = Regex.Match(reportText, @"(?im)^–î–∞—Ç–∞:\s*(?<date>\d{2}\.\d{2}\.\d{4})");
        if (!dateMatch.Success ||
            !DateTime.TryParseExact(dateMatch.Groups["date"].Value, "dd.MM.yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
        {
            await bot.SendTextMessageAsync(message.Chat.Id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06.02.2025).", cancellationToken: ct);
            return;
        }

        var hoursMatch = Regex.Match(reportText, @"(?im)^–ß–∞—Å–æ–≤:\s*(?<hours>\d+)");
        if (!hoursMatch.Success || !int.TryParse(hoursMatch.Groups["hours"].Value, out int hoursWorked))
        {
            await bot.SendTextMessageAsync(message.Chat.Id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).", cancellationToken: ct);
            return;
        }

        var userName = AccountProvider.GetUserNameById(userId);

        var newReport = new DailyReport
        {
            UserId = userId.ToString(),
            UserName = userName,
            ReportDate = parsedDate,
            HoursWorked = hoursWorked,
            FullReportText = reportText,
            ReceivedAt = DateTime.Now
        };
        DatabaseHelper.InsertReport(newReport);

        await bot.SendTextMessageAsync(message.Chat.Id, "‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ.", cancellationToken: ct);

        var allAdmins = DatabaseHelper.GetAllAdmins();
        if (allAdmins.Count > 0)
        {
            string sanitized = WebUtility.HtmlEncode(reportText);
            string msgToAdmins = $"üìå <b>–ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç {userName}:</b>\n\n{sanitized}";

            foreach (var adminAcc in allAdmins)
            {
                await bot.SendTextMessageAsync(adminAcc.TelegramUserId, msgToAdmins, parseMode: ParseMode.Html, cancellationToken: ct);
            }
        }
    }
}
